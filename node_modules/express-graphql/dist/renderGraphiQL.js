
/**
 *  Copyright (c) 2015, Facebook, Inc.
 *  All rights reserved.
 *
 *  This source code is licensed under the BSD-style license found in the
 *  LICENSE file in the root directory of this source tree. An additional grant
 *  of patent rights can be found in the PATENTS file in the same directory.
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.renderGraphiQL = renderGraphiQL;

// Current latest version of GraphiQL.
var GRAPHIQL_VERSION = '0.4.4';

/**
 * When express-graphql receives a request which does not Accept JSON, but does
 * Accept HTML, it may present GraphiQL, the in-browser GraphQL explorer IDE.
 *
 * When shown, it will be pre-populated with the result of having executed the
 * requested query.
 */

function renderGraphiQL(data) {
  var queryString = data.query;
  var variablesString = data.variables ? JSON.stringify(data.variables, null, 2) : null;
  var resultString = data.result ? JSON.stringify(data.result, null, 2) : null;

  console.log('data', queryString, variablesString, resultString);

  var ourMessage =
  `
  # Welcome to the PokeApi GraphQL interface
  # Use ctrl-c to explore endpoints
  # Catch em all!
  {

  }
  `;
  /* eslint-disable max-len */
  return `
  <!DOCTYPE html>
  <html>
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" integrity="sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7" crossorigin="anonymous">

    <link rel="canonical" href="https://pokeapi-graphiql.com">

    <link href="//cdn.jsdelivr.net/graphiql/${GRAPHIQL_VERSION}/graphiql.css" rel="stylesheet" />
    <script src="//cdn.jsdelivr.net/fetch/0.9.0/fetch.min.js"></script>
    <script src="//cdn.jsdelivr.net/react/0.14.2/react.min.js"></script>
    <script src="//cdn.jsdelivr.net/react/0.14.2/react-dom.min.js"></script>
    <script src="//cdn.jsdelivr.net/graphiql/${GRAPHIQL_VERSION}/graphiql.min.js"></script>

    <style>
      .outer {
        height: 100vh;
        width: 100vw;
        overflow: scroll;
      }
      .navbar-default {
        background-color: #C0392B;
        border: none;
        border-radius: 0;
      }
      .navbar-default .navbar-link, .navbar-default .navbar-text {
        color: #999;
      }
      .navbar-default .navbar-link:hover {
        color: white;
      }
      .header {
        font-family: "Helvetica Neue",Helvetica,Arial,sans-serif;
        text-align: center;
      }
      .query-editor {
        height: 40vh;
      }
      .footer {
        padding-top: 1%;
      }
    </style>

  </head>
  <body>
    <div class="outer">
      <nav class="navbar navbar-default">
        <div class="container-fluid">
          <div class="navbar-brand">
            <a class="navbar-brand twitter-share-button" href="https://twitter.com/intent/tweet?text=PokeAPI%20GraphiQL%3F%3F%20So%20Rad%21" data-size="large">Tweet</a>
            <script>window.twttr = (function(d, s, id) {
              var js, fjs = d.getElementsByTagName(s)[0],
                t = window.twttr || {};
              if (d.getElementById(id)) return t;
              js = d.createElement(s);
              js.id = id;
              js.src = "https://platform.twitter.com/widgets.js";
              fjs.parentNode.insertBefore(js, fjs);

              t._e = [];
              t.ready = function(f) {
                t._e.push(f);
              };

              return t;
            }(document, "script", "twitter-wjs"));</script>
          </div>
          <div class="navbar-nav navbar-right">
            <p class="navbar-text">Check out the original <a href="http://pokeapi.co/" class="navbar-link">RESTful PokeAPI</a></p>
          </div>
        </div>
      </nav>
      <div class="container-fluid">
        <div class="row">
          <div class="col-xs-12 header">
            <h1>Pokéapi GraphQL Interface</h1>
            <p class="lead center">Finally; all the Pokémon data you'll ever need, in one place
            <br>and easily accessible through modern GraphQL endpoints.</p>
          </div>
        </div>
      </div>
      <div class="container-fluid">
        <div></div>
        <div id="graphqli"></div>
      </div>
      <div class="container-fluid footer">
        <div class="row">
          <div class="col-xs-12">
            <p>&copy; 2016
              <a href="https://github.com/patrickshaughnessy">Patrick Shaughnessy</a>,
              <a href="https://github.com/Tripleoughtt"> Rich Gautereaux</a>,
              <a href="https://github.com/rlm14"> Robbie McClellan</a>
            </p>
          </div>
        </div>
      </div>
    </div>
    <script>
    // Collect the URL parameters

    var parameters = {};
    window.location.search.substr(1).split(\'&\').forEach(function (entry) {
      var eq = entry.indexOf(\'=\');
      if (eq >= 0) {
        parameters[decodeURIComponent(entry.slice(0, eq))] =
        decodeURIComponent(entry.slice(eq + 1));
      }
    });

    // Produce a Location query string from a parameter object.
    function locationQuery(params) {
      return \'?\' + Object.keys(params).map(function (key) {
        return encodeURIComponent(key) + \'=\' +
        encodeURIComponent(params[key]);
      }).join(\'&\');
    }

    // Derive a fetch URL from the current URL, sans the GraphQL parameters.
    var graphqlParamNames = {
      query: true,
      variables: true,
      operationName: true
    };

    var otherParams = {};
    for (var k in parameters) {
      if (parameters.hasOwnProperty(k) && graphqlParamNames[k] !== true) {
        otherParams[k] = parameters[k];
      }
    }
    var fetchURL = locationQuery(otherParams);

    // Defines a GraphQL fetcher using the fetch API.
    function graphQLFetcher(graphQLParams) {
      return fetch(fetchURL, {
        method: \'post\',
        headers: {
          \'Accept\': \'application/json\',
          \'Content-Type\': \'application/json\'
        },
        body: JSON.stringify(graphQLParams),
        credentials: \'include\',
      }).then(function (response) {
        return response.json();
      });
    }

    // When the query and variables string is edited, update the URL bar so
    // that it can be easily shared.
    function onEditQuery(newQuery) {
      parameters.query = newQuery;
      updateURL();
    }

    function onEditVariables(newVariables) {
      parameters.variables = newVariables;
      updateURL();
    }

    function updateURL() {
      history.replaceState(null, null, locationQuery(parameters));
    }

    // Render <GraphiQL /> into the body.

    React.render(
      React.createElement(GraphiQL, {
        fetcher: graphQLFetcher,
        onEditQuery: onEditQuery,
        onEditVariables: onEditVariables,
        query: ${JSON.stringify(queryString)},
        response: ${JSON.stringify(resultString)},
        variables: ${JSON.stringify(variablesString)}
      }),
      document.getElementById("graphqli")
    );
    </script>
    <script>
    document.getElementsByClassName('execute-button')[0].innerHTML = '<img width="34" height="34" data-reactid=".0.0.0.0.1.0" src="http://img08.deviantart.net/20bd/i/2010/231/7/1/pokeball_template_by_poke_lab.png"></img>'


    </script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js" integrity="sha384-0mSbJDEHialfmuBBQP6A4Qrprq5OVfW37PRR3j5ELqxss1yVqOtnepnHVP9aJ7xS" crossorigin="anonymous"></script>
  </body>
  </html>`;
}
